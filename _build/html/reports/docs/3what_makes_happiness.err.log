Traceback (most recent call last):
  File "C:\Users\danie\miniconda3\envs\jupyterbook\lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\danie\miniconda3\envs\jupyterbook\lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "C:\Users\danie\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\danie\miniconda3\envs\jupyterbook\lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
  File "C:\Users\danie\miniconda3\envs\jupyterbook\lib\asyncio\base_events.py", line 649, in run_until_complete
    return future.result()
  File "C:\Users\danie\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "C:\Users\danie\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\danie\miniconda3\envs\jupyterbook\lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import plotly.graph_objects as go
from plotly.offline import init_notebook_mode, iplot

init_notebook_mode(connected=True)

df = pd.read_csv('final.csv')

df['Happiness_rank'] = df['Happiness'].rank(method='min', ascending=False).astype(int)
total_countries = df['Country'].nunique()

df_edu   = df.dropna(subset=['Edu_expenditure_pct', 'Happiness', 'Country', 'Happiness_rank'])
df_unemp = df.dropna(subset=['Unemployment_rate',    'Happiness', 'Country', 'Happiness_rank'])
df_le    = df.dropna(subset=['Life_expectancy',      'Happiness', 'Country', 'Happiness_rank'])

x_range_edu   = [df_edu['Edu_expenditure_pct'].min(), df_edu['Edu_expenditure_pct'].max()]
x_range_unemp = [df_unemp['Unemployment_rate'].min(), df_unemp['Unemployment_rate'].max()]
x_range_le    = [df_le['Life_expectancy'].min(), df_le['Life_expectancy'].max()]
y_range       = [df['Happiness'].min(), df['Happiness'].max()]

def add_trend_trace(x, y, color, visible=True):

    x_vals = x.values.reshape(-1, 1)
    y_vals = y.values.reshape(-1, 1)
    
    model = LinearRegression()
    model.fit(x_vals, y_vals)

    x_trend = np.linspace(min(x), max(x), 100)
    y_trend = model.predict(x_trend.reshape(-1, 1)).flatten()
    
    return go.Scatter(
        x=x_trend,
        y=y_trend,
        mode='lines',
        line=dict(color=color, dash='dash'),
        name='Trend Line',
        visible=visible,
        hoverinfo='skip'
    )

trace_edu = go.Scatter(
    x=df_edu['Edu_expenditure_pct'],
    y=df_edu['Happiness'],
    mode='markers',
    name='Education Expenditure',
    visible=True,
    text=df_edu['Country'],
    customdata=df_edu['Happiness_rank'],
    hovertemplate=(
        "Country: %{text}<br>"
        f"Rank: %{{customdata}} out of {total_countries}<br>"
        "Education Expenditure: %{x:.1f}% of GDP<br>"
        "Happiness: %{y:.2f}<extra></extra>"
    )
)

trace_unemp = go.Scatter(
    x=df_unemp['Unemployment_rate'],
    y=df_unemp['Happiness'],
    mode='markers',
    name='Unemployment Rate',
    visible=False,
    text=df_unemp['Country'],
    customdata=df_unemp['Happiness_rank'],
    hovertemplate=(
        "Country: %{text}<br>"
        f"Rank: %{{customdata}} out of {total_countries}<br>"
        "Unemployment Rate: %{x:.1f}%<br>"
        "Happiness: %{y:.2f}<extra></extra>"
    )
)

trace_le = go.Scatter(
    x=df_le['Life_expectancy'],
    y=df_le['Happiness'],
    mode='markers',
    name='Life Expectancy',
    visible=False,
    text=df_le['Country'],
    customdata=df_le['Happiness_rank'],
    hovertemplate=(
        "Country: %{text}<br>"
        f"Rank: %{{customdata}} out of {total_countries}<br>"
        "Life Expectancy: %{x:.1f} years<br>"
        "Happiness: %{y:.2f}<extra></extra>"
    )
)

trend_edu = add_trend_trace(df_edu['Edu_expenditure_pct'], df_edu['Happiness'], 'blue', True)
trend_unemp = add_trend_trace(df_unemp['Unemployment_rate'], df_unemp['Happiness'], 'blue', False)
trend_le = add_trend_trace(df_le['Life_expectancy'], df_le['Happiness'], 'blue', False)

fig = go.Figure(data=[trace_edu, trace_unemp, trace_le, trend_edu, trend_unemp, trend_le])

steps = [
    dict(method='update', label='Education Expenditure',
         args=[{'visible': [True, False, False, True, False, False]},
               {'title': 'Happiness vs Education Expenditure',
                'xaxis': {'title': 'Education Expenditure (% of GDP)', 'range': x_range_edu, 'fixedrange': True},
                'yaxis': {'title': 'Happiness', 'range': y_range, 'fixedrange': True}}]),
    dict(method='update', label='Unemployment Rate',
         args=[{'visible': [False, True, False, False, True, False]},
               {'title': 'Happiness vs Unemployment Rate',
                'xaxis': {'title': 'Unemployment Rate (%)', 'range': x_range_unemp, 'fixedrange': True},
                'yaxis': {'title': 'Happiness', 'range': y_range, 'fixedrange': True}}]),
    dict(method='update', label='Life Expectancy',
         args=[{'visible': [False, False, True, False, False, True]},
               {'title': 'Happiness vs Life Expectancy',
                'xaxis': {'title': 'Life Expectancy (years)', 'range': x_range_le, 'fixedrange': True},
                'yaxis': {'title': 'Happiness', 'range': y_range, 'fixedrange': True}}])
]

fig.update_layout(
    sliders=[dict(
        active=0,
        currentvalue={'prefix': 'Metric: '},
        pad={'t': 50},
        steps=steps,
        len=0.9,
        x=0.1,
        xanchor='left'
    )],
    title="Happiness vs Education Expenditure",
    width=900,
    height=600,
    autosize=False,
    margin=dict(t=80, b=80, l=80, r=80),
    xaxis=dict(
        title=dict(text='Education Expenditure (% of GDP)', font=dict(size=14)),
        range=x_range_edu,
        fixedrange=True,
        tickmode='linear',
        dtick=1,
        tickfont=dict(size=12),
        automargin=False
    ),
    yaxis=dict(
        title=dict(text='Happiness', font=dict(size=14)),
        range=y_range,
        fixedrange=True,
        tickmode='linear',
        dtick=1,
        tickfont=dict(size=12),
        automargin=False,
        autorange='reversed'
    ),
    hoverlabel=dict(font=dict(size=12)),
    showlegend=True,
    legend=dict(
        font=dict(size=12),
        x=0.01, y=0.99,
        borderwidth=0
    )
)


iplot(fig)

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mNameError[0m                                 Traceback (most recent call last)
Cell [1;32mIn[2], line 90[0m
[0;32m     58[0m trace_unemp [38;5;241m=[39m go[38;5;241m.[39mScatter(
[0;32m     59[0m     x[38;5;241m=[39mdf_unemp[[38;5;124m'[39m[38;5;124mUnemployment_rate[39m[38;5;124m'[39m],
[0;32m     60[0m     y[38;5;241m=[39mdf_unemp[[38;5;124m'[39m[38;5;124mHappiness[39m[38;5;124m'[39m],
[1;32m   (...)[0m
[0;32m     71[0m     )
[0;32m     72[0m )
[0;32m     74[0m trace_le [38;5;241m=[39m go[38;5;241m.[39mScatter(
[0;32m     75[0m     x[38;5;241m=[39mdf_le[[38;5;124m'[39m[38;5;124mLife_expectancy[39m[38;5;124m'[39m],
[0;32m     76[0m     y[38;5;241m=[39mdf_le[[38;5;124m'[39m[38;5;124mHappiness[39m[38;5;124m'[39m],
[1;32m   (...)[0m
[0;32m     87[0m     )
[0;32m     88[0m )
[1;32m---> 90[0m trend_edu [38;5;241m=[39m [43madd_trend_trace[49m[43m([49m[43mdf_edu[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mEdu_expenditure_pct[39;49m[38;5;124;43m'[39;49m[43m][49m[43m,[49m[43m [49m[43mdf_edu[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mHappiness[39;49m[38;5;124;43m'[39;49m[43m][49m[43m,[49m[43m [49m[38;5;124;43m'[39;49m[38;5;124;43mblue[39;49m[38;5;124;43m'[39;49m[43m,[49m[43m [49m[38;5;28;43;01mTrue[39;49;00m[43m)[49m
[0;32m     91[0m trend_unemp [38;5;241m=[39m add_trend_trace(df_unemp[[38;5;124m'[39m[38;5;124mUnemployment_rate[39m[38;5;124m'[39m], df_unemp[[38;5;124m'[39m[38;5;124mHappiness[39m[38;5;124m'[39m], [38;5;124m'[39m[38;5;124mblue[39m[38;5;124m'[39m, [38;5;28;01mFalse[39;00m)
[0;32m     92[0m trend_le [38;5;241m=[39m add_trend_trace(df_le[[38;5;124m'[39m[38;5;124mLife_expectancy[39m[38;5;124m'[39m], df_le[[38;5;124m'[39m[38;5;124mHappiness[39m[38;5;124m'[39m], [38;5;124m'[39m[38;5;124mblue[39m[38;5;124m'[39m, [38;5;28;01mFalse[39;00m)

Cell [1;32mIn[2], line 26[0m, in [0;36madd_trend_trace[1;34m(x, y, color, visible)[0m
[0;32m     23[0m x_vals [38;5;241m=[39m x[38;5;241m.[39mvalues[38;5;241m.[39mreshape([38;5;241m-[39m[38;5;241m1[39m, [38;5;241m1[39m)
[0;32m     24[0m y_vals [38;5;241m=[39m y[38;5;241m.[39mvalues[38;5;241m.[39mreshape([38;5;241m-[39m[38;5;241m1[39m, [38;5;241m1[39m)
[1;32m---> 26[0m model [38;5;241m=[39m [43mLinearRegression[49m()
[0;32m     27[0m model[38;5;241m.[39mfit(x_vals, y_vals)
[0;32m     29[0m x_trend [38;5;241m=[39m np[38;5;241m.[39mlinspace([38;5;28mmin[39m(x), [38;5;28mmax[39m(x), [38;5;241m100[39m)

[1;31mNameError[0m: name 'LinearRegression' is not defined

