Traceback (most recent call last):
  File "/home/m/miniconda3/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/m/miniconda3/lib/python3.13/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "/home/m/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "/home/m/miniconda3/lib/python3.13/site-packages/jupyter_core/utils/__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "/home/m/miniconda3/lib/python3.13/asyncio/base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "/home/m/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "/home/m/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/m/miniconda3/lib/python3.13/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import numpy as np
import plotly.graph_objects as go
from plotly.offline import init_notebook_mode, iplot
from sklearn.linear_model import LinearRegression

init_notebook_mode(connected=True)

df = pd.read_csv('final.csv')

df['Happiness_rank'] = df['Happiness'].rank(method='min', ascending=False).astype(int)
total_countries = df['Country'].nunique()

df_gdp  = df.dropna(subset=['GDP_current_usd', 'Happiness', 'Country', 'Happiness_rank'])
df_gni  = df.dropna(subset=['GNI_current_usd', 'Happiness', 'Country', 'Happiness_rank'])
df_gini = df.dropna(subset=['Gini_index',       'Happiness', 'Country', 'Happiness_rank'])

def add_trend_line(fig, x, y, name, color, visible=True):
    
    x_vals = np.log(x) if name in ['GDP', 'GNI'] else x
    x_vals = x_vals.values.reshape(-1, 1)
    y_vals = y.values.reshape(-1, 1)
    
    model = LinearRegression()
    model.fit(x_vals, y_vals)
    
    
    x_trend = np.linspace(min(x), max(x), 100)
    x_trend_input = np.log(x_trend) if name in ['GDP', 'GNI'] else x_trend
    
    y_trend = model.predict(x_trend_input.reshape(-1, 1)).flatten()
    
    fig.add_trace(
        go.Scatter(
            x=x_trend,
            y=y_trend,
            mode='lines',
            name=f'{name} Trend',
            line=dict(color=color, dash='dash'),
            visible=visible,
            hoverinfo='skip'
        )
    )

trace_gdp = go.Scatter(
    x=df_gdp['GDP_current_usd'],
    y=df_gdp['Happiness'],
    mode='markers',
    name='GDP (US$)',
    visible=True,
    text=df_gdp['Country'],
    customdata=df_gdp['Happiness_rank'],
    hovertemplate=(
        "Country: %{text}<br>"
        f"Rank: %{{customdata}} out of {total_countries}<br>"
        "GDP (US$): %{x:$,.0f}<br>"
        "Happiness: %{y:.2f}<extra></extra>"
    )
)

trace_gni = go.Scatter(
    x=df_gni['GNI_current_usd'],
    y=df_gni['Happiness'],
    mode='markers',
    name='GNI (US$)',
    visible=False,
    text=df_gni['Country'],
    customdata=df_gni['Happiness_rank'],
    hovertemplate=(
        "Country: %{text}<br>"
        f"Rank: %{{customdata}} out of {total_countries}<br>"
        "GNI (US$): %{x:$,.0f}<br>"
        "Happiness: %{y:.2f}<extra></extra>"
    )
)

trace_gini = go.Scatter(
    x=df_gini['Gini_index'],
    y=df_gini['Happiness'],
    mode='markers',
    name='Gini Index',
    visible=False,
    text=df_gini['Country'],
    customdata=df_gini['Happiness_rank'],
    hovertemplate=(
        "Country: %{text}<br>"
        f"Rank: %{{customdata}} out of {total_countries}<br>"
        "Gini Index: %{x:.2f}<br>"
        "Happiness: %{y:.2f}<extra></extra>"
    )
)

fig = go.Figure(data=[trace_gdp, trace_gni, trace_gini])

add_trend_line(fig, df_gdp['GDP_current_usd'], df_gdp['Happiness'], 'GDP', 'blue', True)
add_trend_line(fig, df_gni['GNI_current_usd'], df_gni['Happiness'], 'GNI', 'blue', False)
add_trend_line(fig, df_gini['Gini_index'], df_gini['Happiness'], 'Gini', 'blue', False)

steps = [
    dict(
        method='update',
        label='GDP (US$)',
        args=[
            {'visible': [True, False, False]},
            {
                'title': 'Happiness vs GDP (current US$)',
                'xaxis': {'title': 'GDP (current US$)', 'type': 'log'},
                'yaxis': {'title': 'Happiness'}
            }
        ]
    ),
    dict(
        method='update',
        label='GNI (US$)',
        args=[
            {'visible': [False, True, False]},
            {
                'title': 'Happiness vs GNI (current US$)',
                'xaxis': {'title': 'GNI (current US$)', 'type': 'log'},
                'yaxis': {'title': 'Happiness'}
            }
        ]
    ),
    dict(
        method='update',
        label='Gini Index',
        args=[
            {'visible': [False, False, True]},
            {
                'title': 'Happiness vs Gini Index',
                'xaxis': {'title': 'Gini Index', 'type': 'linear'},
                'yaxis': {'title': 'Happiness'}
            }
        ]
    )
]

fig.update_layout(
    sliders=[dict(
        active=0,
        currentvalue={'prefix': 'Metric: '},
        pad={'t': 50},
        steps=steps
    )],
    title="Happiness vs GDP (current US$)",
    width=900,
    height=600,
    margin={'t':80},
    xaxis=dict(
        title='GDP (current US$)',
        type='log'
    ),
    yaxis=dict(
        title='Happiness'
    )
)

iplot(fig)

------------------


[31m---------------------------------------------------------------------------[39m
[31mModuleNotFoundError[39m                       Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[1][39m[32m, line 5[39m
[32m      3[39m [38;5;28;01mimport[39;00m[38;5;250m [39m[34;01mplotly[39;00m[34;01m.[39;00m[34;01mgraph_objects[39;00m[38;5;250m [39m[38;5;28;01mas[39;00m[38;5;250m [39m[34;01mgo[39;00m
[32m      4[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01mplotly[39;00m[34;01m.[39;00m[34;01moffline[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m init_notebook_mode, iplot
[32m----> [39m[32m5[39m [38;5;28;01mfrom[39;00m[38;5;250m [39m[34;01msklearn[39;00m[34;01m.[39;00m[34;01mlinear_model[39;00m[38;5;250m [39m[38;5;28;01mimport[39;00m LinearRegression
[32m      7[39m init_notebook_mode(connected=[38;5;28;01mTrue[39;00m)
[32m      9[39m df = pd.read_csv([33m'[39m[33mfinal.csv[39m[33m'[39m)

[31mModuleNotFoundError[39m: No module named 'sklearn'

